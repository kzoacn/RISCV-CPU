$date
	Mon Dec 18 13:45:44 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$scope module cpu0 $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 # npc [31:0] $end
$var wire 32 $ opc [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 5 ' rd [4:0] $end
$var wire 1 ( is_busy $end
$var wire 7 ) _opcode [6:0] $end
$var wire 32 * _imm [31:0] $end
$var wire 7 + _fun7 [6:0] $end
$var wire 3 , _fun3 [2:0] $end
$scope module ic $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 - npc [31:0] $end
$var wire 32 . opc [31:0] $end
$var wire 32 / tmp_instr [31:0] $end
$var wire 5 0 rs2 [4:0] $end
$var wire 5 1 rs1 [4:0] $end
$var wire 5 2 rd [4:0] $end
$var wire 7 3 opcode [6:0] $end
$var wire 1 ( is_busy $end
$var wire 32 4 imm [31:0] $end
$var wire 7 5 fun7 [6:0] $end
$var wire 3 6 fun3 [2:0] $end
$var wire 1 7 done $end
$var reg 32 8 instr [31:0] $end
$var reg 1 9 is_fetch $end
$var reg 32 : pc [31:0] $end
$scope module decode $end
$var wire 1 ! clk $end
$var wire 32 ; instr [31:0] $end
$var reg 3 < fun3 [2:0] $end
$var reg 7 = fun7 [6:0] $end
$var reg 32 > imm [31:0] $end
$var reg 7 ? opCode [6:0] $end
$var reg 5 @ rd [4:0] $end
$var reg 5 A rs1 [4:0] $end
$var reg 5 B rs2 [4:0] $end
$upscope $end
$scope module instr_mem $end
$var wire 32 C adr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 D in [31:0] $end
$var wire 1 E load $end
$var reg 1 7 done $end
$var reg 32 F out [31:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$upscope $end
$scope module rg $end
$var wire 3 H _fun3 [2:0] $end
$var wire 7 I _fun7 [6:0] $end
$var wire 32 J _imm [31:0] $end
$var wire 7 K _opcode [6:0] $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 L npc [31:0] $end
$var wire 32 M opc [31:0] $end
$var wire 5 N rd [4:0] $end
$var wire 5 O rs1 [4:0] $end
$var wire 5 P rs2 [4:0] $end
$var wire 32 Q mem_out [31:0] $end
$var wire 1 R mem_busy $end
$var reg 1 ( is_busy $end
$var reg 32 S mem_adr [31:0] $end
$var reg 32 T mem_in [31:0] $end
$var reg 1 U mem_load $end
$var reg 1 V mem_start $end
$var integer 32 W i [31:0] $end
$var integer 32 X qhead [31:0] $end
$var integer 32 Y qsz [31:0] $end
$var integer 32 Z qtail [31:0] $end
$scope module alu[0] $end
$var wire 3 [ fun3 [2:0] $end
$var wire 7 \ fun7 [6:0] $end
$var wire 32 ] rs1 [31:0] $end
$var wire 32 ^ rs2 [31:0] $end
$var wire 1 _ start $end
$var reg 1 ` busy $end
$var reg 1 a done $end
$var reg 1 b neg $end
$var reg 32 c res [31:0] $end
$var reg 1 d zero $end
$upscope $end
$scope module alu[1] $end
$var wire 3 e fun3 [2:0] $end
$var wire 7 f fun7 [6:0] $end
$var wire 32 g rs1 [31:0] $end
$var wire 32 h rs2 [31:0] $end
$var wire 1 i start $end
$var reg 1 j busy $end
$var reg 1 k done $end
$var reg 1 l neg $end
$var reg 32 m res [31:0] $end
$var reg 1 n zero $end
$upscope $end
$scope module alu[2] $end
$var wire 3 o fun3 [2:0] $end
$var wire 7 p fun7 [6:0] $end
$var wire 32 q rs1 [31:0] $end
$var wire 32 r rs2 [31:0] $end
$var wire 1 s start $end
$var reg 1 t busy $end
$var reg 1 u done $end
$var reg 1 v neg $end
$var reg 32 w res [31:0] $end
$var reg 1 x zero $end
$upscope $end
$scope module alu[3] $end
$var wire 3 y fun3 [2:0] $end
$var wire 7 z fun7 [6:0] $end
$var wire 32 { rs1 [31:0] $end
$var wire 32 | rs2 [31:0] $end
$var wire 1 } start $end
$var reg 1 ~ busy $end
$var reg 1 !" done $end
$var reg 1 "" neg $end
$var reg 32 #" res [31:0] $end
$var reg 1 $" zero $end
$upscope $end
$scope module mem $end
$var wire 32 %" adr [31:0] $end
$var wire 32 &" in [31:0] $end
$var wire 1 U load $end
$var wire 1 V start $end
$var reg 1 R busy $end
$var reg 32 '" out [31:0] $end
$var integer 32 (" i [31:0] $end
$upscope $end
$scope begin init $end
$var integer 32 )" i [31:0] $end
$upscope $end
$scope begin newcmd $end
$var integer 32 *" i [31:0] $end
$var integer 32 +" r [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx +"
bx *"
b100 )"
b10000000000 ("
bx '"
bx &"
bx %"
x$"
bx #"
x""
x!"
0~
z}
bz |
bz {
bz z
bz y
xx
bx w
xv
xu
0t
0s
b0 r
b0 q
b0 p
b0 o
xn
bx m
xl
xk
0j
0i
b0 h
b0 g
b0 f
b0 e
xd
bx c
xb
xa
0`
z_
bz ^
bz ]
bz \
bz [
b0 Z
b0 Y
b0 X
bx W
xV
xU
bx T
bx S
0R
bx Q
b0 P
b0 O
b0 N
bz M
bz L
b0 K
bx J
b0 I
b0 H
b10000000000 G
b0 F
0E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
bx >
b0 =
b0 <
b0 ;
b0 :
19
b0 8
17
b0 6
b0 5
bx 4
b0 3
b0 2
b0 1
b0 0
b0 /
bz .
bz -
b0 ,
b0 +
bx *
b0 )
x(
b0 '
b0 &
b0 %
bz $
bz #
0"
0!
$end
#50
b0 *
b0 4
b0 >
b0 J
b10011 )
b10011 3
b10011 ?
b10011 K
b10100000010010011 /
b10100000010010011 F
b10011 8
b10011 ;
17
1!
#51
b11 W
#52
0(
b11 W
#53
b101 ("
0R
1V
b100 W
#100
0!
#150
b100 ,
b100 6
b100 <
b100 H
b10 &
b10 1
b10 A
b10 O
b1 '
b1 2
b1 @
b1 N
b10011 )
b10011 3
b10011 ?
b10011 K
b100 :
b100 C
b10100000010010011 8
b10100000010010011 ;
17
1!
#151
b11 W
#152
0(
b11 W
#153
b101 ("
0R
1V
b100 W
#200
0!
#250
b100 ,
b100 6
b100 <
b100 H
b10011 )
b10011 3
b10011 ?
b10011 K
b10 &
b10 1
b10 A
b10 O
b1 '
b1 2
b1 @
b1 N
b100000000000100010011 /
b100000000000100010011 F
b1000 :
b1000 C
b100 o
b11 *"
b10 +"
17
b10100000010010011 8
b10100000010010011 ;
1!
#251
0v
1x
b0 w
1u
0t
1s
b11 W
#252
0(
0s
b11 W
#253
b101 ("
0R
1V
b100 W
#300
0!
#350
b1 *
b1 4
b1 >
b1 J
b1 %
b1 0
b1 B
b1 P
b0 ,
b0 6
b0 <
b0 H
b10011 )
b10011 3
b10011 ?
b10011 K
b0 &
b0 1
b0 A
b0 O
b10 '
b10 2
b10 @
b10 N
b1100 :
b1100 C
b11000001000000000010011 /
b11000001000000000010011 F
b11 *"
b10 +"
b100000000000100010011 8
b100000000000100010011 ;
17
1!
#351
1u
0t
1s
b11 W
#352
0(
0s
b11 W
#353
b101 ("
0R
1V
b100 W
#400
0!
#450
b110 *
b110 4
b110 >
b110 J
b1 &
b1 1
b1 A
b1 O
b10011 )
b10011 3
b10011 ?
b10011 K
b110 %
b110 0
b110 B
b110 P
b0 '
b0 2
b0 @
b0 N
b0 /
b0 F
b10000 :
b10000 C
b0 o
b1 r
b11 *"
b10 +"
17
b11000001000000000010011 8
b11000001000000000010011 ;
1!
#451
0x
b1 w
1u
0t
1s
b11 W
#452
0(
0s
b11 W
#453
b101 ("
0R
1V
b100 W
#500
0!
#550
b0 )
b0 3
b0 ?
b0 K
b0 %
b0 0
b0 B
b0 P
b0 &
b0 1
b0 A
b0 O
b10100 :
b10100 C
b110 r
b11 *"
b10 +"
b0 8
b0 ;
17
1!
#551
b110 w
1u
0t
1s
b11 W
#552
0(
0s
b11 W
#553
b101 ("
0R
1V
b100 W
#600
0!
#650
b11000 :
b11000 C
17
1!
#651
b11 W
#652
0(
b11 W
#653
b101 ("
0R
1V
b100 W
#700
0!
#750
b11100 :
b11100 C
17
1!
#751
b11 W
#752
0(
b11 W
#753
b101 ("
0R
1V
b100 W
#800
0!
#850
b100000 :
b100000 C
17
1!
#851
b11 W
#852
0(
b11 W
#853
b101 ("
0R
1V
b100 W
#900
0!
#950
b100100 :
b100100 C
17
1!
#951
b11 W
#952
0(
b11 W
#953
b101 ("
0R
1V
b100 W
#1000
0!
#1050
b101000 :
b101000 C
17
1!
#1051
b11 W
#1052
0(
b11 W
#1053
b101 ("
0R
1V
b100 W
#1100
0!
#1150
b101100 :
b101100 C
17
1!
#1151
b11 W
#1152
0(
b11 W
#1153
b101 ("
0R
1V
b100 W
#1200
0!
#1250
b110000 :
b110000 C
17
1!
#1251
b11 W
#1252
0(
b11 W
#1253
b101 ("
0R
1V
b100 W
