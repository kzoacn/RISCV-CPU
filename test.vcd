$date
	Mon Dec 18 23:52:32 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$scope module cpu0 $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 # npc [31:0] $end
$var wire 32 $ opc [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 5 ' rd [4:0] $end
$var wire 1 ( is_busy $end
$var wire 7 ) _opcode [6:0] $end
$var wire 32 * _imm [31:0] $end
$var wire 7 + _fun7 [6:0] $end
$var wire 3 , _fun3 [2:0] $end
$scope module ic $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 - npc [31:0] $end
$var wire 32 . opc [31:0] $end
$var wire 32 / tmp_instr [31:0] $end
$var wire 5 0 rs2 [4:0] $end
$var wire 5 1 rs1 [4:0] $end
$var wire 5 2 rd [4:0] $end
$var wire 7 3 opcode [6:0] $end
$var wire 1 ( is_busy $end
$var wire 32 4 imm [31:0] $end
$var wire 7 5 fun7 [6:0] $end
$var wire 3 6 fun3 [2:0] $end
$var wire 1 7 done $end
$var reg 32 8 instr [31:0] $end
$var reg 1 9 is_fetch $end
$var reg 32 : pc [31:0] $end
$scope module decode $end
$var wire 1 ! clk $end
$var wire 32 ; instr [31:0] $end
$var reg 3 < fun3 [2:0] $end
$var reg 7 = fun7 [6:0] $end
$var reg 32 > imm [31:0] $end
$var reg 7 ? opCode [6:0] $end
$var reg 5 @ rd [4:0] $end
$var reg 5 A rs1 [4:0] $end
$var reg 5 B rs2 [4:0] $end
$upscope $end
$scope module instr_mem $end
$var wire 32 C adr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 D in [31:0] $end
$var wire 1 E load $end
$var reg 1 7 done $end
$var reg 32 F out [31:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$upscope $end
$scope module rg $end
$var wire 3 H _fun3 [2:0] $end
$var wire 7 I _fun7 [6:0] $end
$var wire 32 J _imm [31:0] $end
$var wire 7 K _opcode [6:0] $end
$var wire 1 ! clk $end
$var wire 1 " get_npc $end
$var wire 32 L npc [31:0] $end
$var wire 32 M opc [31:0] $end
$var wire 5 N rd [4:0] $end
$var wire 5 O rs1 [4:0] $end
$var wire 5 P rs2 [4:0] $end
$var wire 32 Q mem_out [31:0] $end
$var wire 1 R mem_done $end
$var wire 1 S mem_busy $end
$var reg 1 ( is_busy $end
$var reg 32 T mem_adr [31:0] $end
$var reg 1 U mem_deb $end
$var reg 32 V mem_in [31:0] $end
$var reg 1 W mem_load $end
$var reg 3 X mem_siz [2:0] $end
$var reg 1 Y mem_start $end
$var integer 32 Z i [31:0] $end
$var integer 32 [ qhead [31:0] $end
$var integer 32 \ qsz [31:0] $end
$var integer 32 ] qtail [31:0] $end
$scope module alu[0] $end
$var wire 1 ^ done $end
$var wire 3 _ fun3 [2:0] $end
$var wire 7 ` fun7 [6:0] $end
$var wire 32 a rs1 [31:0] $end
$var wire 32 b rs2 [31:0] $end
$var wire 1 c start $end
$var reg 1 d _done $end
$var reg 1 e busy $end
$var reg 1 f neg $end
$var reg 32 g res [31:0] $end
$var reg 1 h zero $end
$upscope $end
$scope module alu[1] $end
$var wire 1 i done $end
$var wire 3 j fun3 [2:0] $end
$var wire 7 k fun7 [6:0] $end
$var wire 32 l rs1 [31:0] $end
$var wire 32 m rs2 [31:0] $end
$var wire 1 n start $end
$var reg 1 i _done $end
$var reg 1 o busy $end
$var reg 1 p neg $end
$var reg 32 q res [31:0] $end
$var reg 1 r zero $end
$upscope $end
$scope module alu[2] $end
$var wire 1 s done $end
$var wire 3 t fun3 [2:0] $end
$var wire 7 u fun7 [6:0] $end
$var wire 32 v rs1 [31:0] $end
$var wire 32 w rs2 [31:0] $end
$var wire 1 x start $end
$var reg 1 s _done $end
$var reg 1 y busy $end
$var reg 1 z neg $end
$var reg 32 { res [31:0] $end
$var reg 1 | zero $end
$upscope $end
$scope module alu[3] $end
$var wire 1 } done $end
$var wire 3 ~ fun3 [2:0] $end
$var wire 7 !" fun7 [6:0] $end
$var wire 32 "" rs1 [31:0] $end
$var wire 32 #" rs2 [31:0] $end
$var wire 1 $" start $end
$var reg 1 } _done $end
$var reg 1 %" busy $end
$var reg 1 &" neg $end
$var reg 32 '" res [31:0] $end
$var reg 1 (" zero $end
$upscope $end
$scope module alu[4] $end
$var wire 1 )" done $end
$var wire 3 *" fun3 [2:0] $end
$var wire 7 +" fun7 [6:0] $end
$var wire 32 ," rs1 [31:0] $end
$var wire 32 -" rs2 [31:0] $end
$var wire 1 ." start $end
$var reg 1 /" _done $end
$var reg 1 0" busy $end
$var reg 1 1" neg $end
$var reg 32 2" res [31:0] $end
$var reg 1 3" zero $end
$upscope $end
$scope module mem $end
$var wire 32 4" adr [31:0] $end
$var wire 1 U deb $end
$var wire 32 5" in [31:0] $end
$var wire 1 W load $end
$var wire 3 6" siz [2:0] $end
$var wire 1 Y start $end
$var reg 1 S busy $end
$var reg 1 R done $end
$var reg 32 7" out [31:0] $end
$var integer 32 8" i [31:0] $end
$upscope $end
$scope begin init $end
$var integer 32 9" i [31:0] $end
$upscope $end
$scope begin newcmd $end
$var integer 32 :" i [31:0] $end
$var integer 32 ;" r [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;"
bx :"
b101 9"
b1000000000000 8"
bx 7"
b10 6"
b0 5"
b0 4"
x3"
bx 2"
x1"
00"
0/"
z."
bz -"
bz ,"
bz +"
bz *"
0)"
x("
bx '"
x&"
0%"
0$"
b0 #"
b0 ""
b0 !"
b0 ~
0}
x|
bx {
xz
0y
0x
b0 w
b0 v
b0 u
b0 t
0s
xr
bx q
xp
0o
0n
b0 m
b0 l
b0 k
b0 j
0i
xh
bx g
xf
0e
0d
zc
bz b
bz a
bz `
bz _
0^
b0 ]
b0 \
b0 [
bx Z
0Y
b10 X
0W
b0 V
xU
b0 T
0S
0R
bx Q
b0 P
b0 O
b0 N
bz M
bz L
b0 K
bx J
b0 I
b0 H
b10000000000 G
b0 F
0E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
bx >
b0 =
b0 <
b0 ;
b0 :
19
b0 8
17
b0 6
b0 5
bx 4
b0 3
b0 2
b0 1
b0 0
b0 /
bz .
bz -
b0 ,
b0 +
bx *
b0 )
x(
b0 '
b0 &
b0 %
bz $
bz #
0"
0!
$end
#50000
b0 *
b0 4
b0 >
b0 J
b10011 )
b10011 3
b10011 ?
b10011 K
b10000100000011 /
b10000100000011 F
b10011 8
b10011 ;
b10100 8"
17
0U
b100 Z
1!
#50001
b10100 8"
0(
0U
b100 Z
#100000
0!
#150000
b10 ,
b10 6
b10 <
b10 H
b10 '
b10 2
b10 @
b10 N
b11 )
b11 3
b11 ?
b11 K
b100 :
b100 C
b10100 8"
b10000100000011 8
b10000100000011 ;
17
0U
b100 Z
1!
#150001
b10100 8"
0(
0U
b100 Z
#200000
0!
#250000
b10 ,
b10 6
b10 <
b10 H
b11 )
b11 3
b11 ?
b11 K
b10 '
b10 2
b10 @
b10 N
b1100010110000010010011 /
b1100010110000010010011 F
b1000 :
b1000 C
1i
0p
1r
b0 q
0o
b10100 8"
1n
0U
b100 Z
b10 k
b1 ]
b0 :"
b1 ;"
17
b10000100000011 8
b10000100000011 ;
1!
#250001
b10100 8"
0(
0U
b100 Z
#300000
0!
#350000
b11 *
b11 4
b11 >
b11 J
b11 %
b11 0
b11 B
b11 P
b10 &
b10 1
b10 A
b10 O
b0 Q
b0 7"
b110 ,
b110 6
b110 <
b110 H
b10011 )
b10011 3
b10011 ?
b10011 K
b1 '
b1 2
b1 @
b1 N
b1100 :
b1100 C
b100000010000000100011 /
b100000010000000100011 F
1R
0S
b10100 8"
1Y
0U
b100 Z
b10 u
b10 ]
b0 :"
b10 ;"
b1100010110000010010011 8
b1100010110000010010011 ;
17
1!
#350001
0i
b10100 8"
0Y
0(
b1 [
0n
0U
b100 Z
#400000
0!
#450000
b0 *
b0 4
b0 >
b0 J
b10 ,
b10 6
b10 <
b10 H
b100011 )
b100011 3
b100011 ?
b100011 K
b1 %
b1 0
b1 B
b1 P
b0 &
b0 1
b0 A
b0 O
b0 '
b0 2
b0 @
b0 N
b100011110000100110011 /
b100011110000100110011 F
b10000 :
b10000 C
1s
0z
1|
b0 {
0y
b10100 8"
1x
0U
b100 Z
b0 k
b110 j
b11 m
b0 :"
b1 ;"
17
b100000010000000100011 8
b100000010000000100011 ;
1!
#450001
b10100 8"
0(
0U
b100 Z
#500000
0!
#550000
b1 *
b1 4
b1 >
b1 J
b11 &
b11 1
b11 A
b11 O
b10 '
b10 2
b10 @
b10 N
b110 ,
b110 6
b110 <
b110 H
b110011 )
b110011 3
b110011 ?
b110011 K
b1 %
b1 0
b1 B
b1 P
b10100 :
b10100 C
b1000000010001000100011 /
b1000000010001000100011 F
0S
1R
b10100 8"
1Y
0U
b100 Z
b10 !"
b11 ]
b0 :"
b11 ;"
b100011110000100110011 8
b100011110000100110011 ;
17
1!
#550001
0s
b10100 8"
0Y
0(
b10 [
0x
0U
b100 Z
#600000
0!
#650000
b100 *
b100 4
b100 >
b100 J
b10 ,
b10 6
b10 <
b10 H
b100011 )
b100011 3
b100011 ?
b100011 K
b10 %
b10 0
b10 B
b10 P
b0 &
b0 1
b0 A
b0 O
b100 '
b100 2
b100 @
b100 N
b0 /
b0 F
b11000 :
b11000 C
1i
0r
b11 q
0o
b10100 8"
1n
0U
b100 Z
b0 u
b110 t
b0 :"
b10 ;"
17
b1000000010001000100011 8
b1000000010001000100011 ;
1!
#650001
0i
b10100 8"
0(
0n
b11 #"
b11 w
0U
b100 Z
#700000
0!
#750000
b0 ,
b0 6
b0 <
b0 H
b0 )
b0 3
b0 ?
b0 K
b0 %
b0 0
b0 B
b0 P
b0 '
b0 2
b0 @
b0 N
b11100 :
b11100 C
1}
0&"
1("
b0 '"
0%"
1s
0|
b11 {
0y
b10100 8"
1$"
b0 #"
1x
0U
b100 Z
b10 k
b100 ]
b0 :"
b1 ;"
b0 8
b0 ;
17
1!
#750001
0s
b10100 8"
0(
0x
0U
b100 Z
#800000
0!
#850000
b100000 :
b100000 C
0S
1R
b10100 8"
17
1Y
1W
b11 V
b11 5"
0U
b100 Z
1!
#850001
0}
b10100 8"
0Y
0(
b11 [
0$"
0U
b100 Z
#900000
0!
#950000
b100100 :
b100100 C
1i
b100 q
0o
b10100 8"
17
1n
b0 j
b100 m
0U
b100 Z
1!
#950001
b10100 8"
0(
0U
b100 Z
#1000000
0!
#1050000
b101000 :
b101000 C
0S
1R
b10100 8"
17
1Y
b100 T
b100 4"
0U
b100 Z
1!
#1050001
0i
b10100 8"
0Y
0(
b100 [
0n
0U
b100 Z
#1100000
0!
#1150000
b101100 :
b101100 C
b10100 8"
17
0U
b100 Z
1!
#1150001
b10100 8"
0(
0U
b100 Z
#1200000
0!
#1250000
b110000 :
b110000 C
b10100 8"
17
0U
b100 Z
1!
#1250001
b10100 8"
0(
0U
b100 Z
#1300000
0!
#1350000
b110100 :
b110100 C
b10100 8"
17
0U
b100 Z
1!
#1350001
b10100 8"
0(
0U
b100 Z
#1400000
0!
#1450000
b111000 :
b111000 C
b10100 8"
17
0U
b100 Z
1!
#1450001
b10100 8"
0(
0U
b100 Z
#1500000
0!
#1550000
b111100 :
b111100 C
b10100 8"
17
0U
b100 Z
1!
#1550001
b10100 8"
0(
0U
b100 Z
#1600000
0!
#1650000
b1000000 :
b1000000 C
b10100 8"
17
0U
b100 Z
1!
#1650001
b10100 8"
0(
0U
b100 Z
#1700000
0!
#1750000
b1000100 :
b1000100 C
b10100 8"
17
0U
b100 Z
1!
#1750001
b10100 8"
0(
0U
b100 Z
#1800000
0!
#1850000
b1001000 :
b1001000 C
b10100 8"
17
0U
b100 Z
1!
#1850001
b10100 8"
0(
0U
b100 Z
#1900000
0!
#1950000
b1001100 :
b1001100 C
b10100 8"
17
0U
b100 Z
1!
#1950001
b10100 8"
0(
0U
b100 Z
#2000000
0!
#2050000
b1010000 :
b1010000 C
b10100 8"
17
0U
b100 Z
1!
#2050001
b10100 8"
0(
0U
b100 Z
#2100000
0!
#2150000
b1010100 :
b1010100 C
b10100 8"
17
0U
b100 Z
1!
#2150001
b10100 8"
0(
0U
b100 Z
#2200000
0!
#2250000
b1011000 :
b1011000 C
b10100 8"
17
0U
b100 Z
1!
#2250001
b10100 8"
0(
0U
b100 Z
#2300000
0!
#2350000
b1011100 :
b1011100 C
b10100 8"
17
0U
b100 Z
1!
#2350001
b10100 8"
0(
0U
b100 Z
#2400000
0!
#2450000
b1100000 :
b1100000 C
b10100 8"
17
0U
b100 Z
1!
#2450001
b10100 8"
0(
0U
b100 Z
#2500000
0!
#2550000
b1100100 :
b1100100 C
b10100 8"
17
0U
b100 Z
1!
#2550001
b10100 8"
0(
0U
b100 Z
#2600000
0!
#2650000
b1101000 :
b1101000 C
b10100 8"
17
0U
b100 Z
1!
#2650001
b10100 8"
0(
0U
b100 Z
#2700000
0!
#2750000
b1101100 :
b1101100 C
b10100 8"
17
0U
b100 Z
1!
#2750001
b10100 8"
0(
0U
b100 Z
